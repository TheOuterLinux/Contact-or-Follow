<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Bitchute.com - TheOuterLinux Channel</title>
  <link>https://bitchute.com/channel/theouterlinux</link>
  <description>I just enjoy giving complete strangers nerdgasms using FOSS and Linux.</description>
  <item>
    <title>w3m+mpv=magic</title>
    <link>https://www.bitchute.com/video/iuVQrGO3yeRz</link>
    <description>Using w3m’s external browser (SHIFT+M) shortcut set to “mpv --vo=opengl --ao=alsa,” (--vo=drm for TTY), you can watch videos that are embedded in the current URL. This is due to a combination of a mobile user-agent (MP4 > FLV) and mpv using youtube-dl to hunt and play videos or live streams. Therefore, this method will work with any website that youtube-dl supports: https://rg3.github.io/youtube-dl/supportedsites.html. Another thing to note, because of w3m now defaulting to a mobile user-agent, I recommend duplicating the original config file for when you need to load a website that may give you JavaScript errors (i.e., “w3m -config ~/.w3m/config-desktop”). I created an alias for this as “w3m-desktop” to make things faster.</description>
    <pubDate>Sun, 03 Dec 2017 00:00:00 GMT</pubDate>
  </item>
  <item>
    <title>Twitch - The MPV, the IRSSI, and the TMUX</title>
    <link>https://www.bitchute.com/video/ly4YNCZtSswb/</link>
    <description>In this video, I’m going to show you how to use mpv and irssi (IRC client) to watch live Twitch streams and chat with tmux as a split-pane, one half stream (via caca) and the other half the chat (irssi), with mouse enabled. I will also show you that you can watch live Twitch streams as you normally would using mpv and chat with an IRC client (irssi) separately. You can find the original Twitch IRC guide here: https://help.twitch.tv/customer/portal/articles/1302780-twitch-irc.</description>
    <pubDate>Sun, 03 Dec 2017 00:00:01 GMT</pubDate>
  </item>
  <item>
    <title>Encrypted Communication</title>
    <link>https://www.bitchute.com/video/6fqO3XeoBLq5/</link>
    <description>The Tox clients Toxic, qTox, and Antidote are demonstrated for peer-to-peer, encrypted messaging, file transferring, and audio/video calling.</description>
    <pubDate>Sun, 03 Dec 2017 00:00:02 GMT</pubDate>
  </item>
  <item>
    <title>Recording music in the command-line</title>
    <link>https://www.bitchute.com/video/abnIpd8vxWnZ/</link>
    <description>Do you enjoy free and open source audio/music programs like Audacity? ZynAddSubFX/Yoshimi? Hydrogen? Do you play guitar? These are all fun to mess around with, but what about doing so in a command line? No JACK required.</description>
    <pubDate>Sun, 03 Dec 2017 00:00:03 GMT</pubDate>
  </item>
  <item>
    <title>Spooky Math - Solve Halloween-themed math problems using the command-line</title>
    <link>https://www.bitchute.com/video/zbgQc6eoodO9/</link>
    <description>Learn how to do math (nothing too complicated) in the command line but with a Halloween theme. I’ll be using Python 3, bsd-games (for primes), gperiodic, units, sc, and gnuplot on a Linux system.</description>
    <pubDate>Sun, 03 Dec 2017 00:00:04 GMT</pubDate>
  </item>
  <item>
    <title>Editing images in the command-line</title>
    <link>https://www.bitchute.com/video/KAvvdoMXtdRq/</link>
    <description>Using this script (https://github.com/TheOuterLinux/BitChuteNotes/tree/master/Command-Line/09%20-%20Command-Line%20-%20Editing%20images%20in%20the%20command%20line), you can edit images easily in the command line. Dailog as an interface allows keyboard, mouse, and space bar for auto-completion. If you are in GUI, images are previewed with your default viewer; if you are in TTY, fbi (frame-buffering image-viewer) is used. This is not for batch editing.</description>
    <pubDate>Sun, 03 Dec 2017 00:00:05 GMT</pubDate>
  </item>
  <item>
    <title>Translator</title>
    <link>https://www.bitchute.com/video/yYyZWUtIEuG5/</link>
    <description>I found a really cool translator script that only needs gawk (gnu awk) to work. However, I’ve attempted to “beef it up” by creating a “front-end” of sorts that uses dialog to make it easier to do things like:

    Scan and translate
    Open document or image file and translate
    Type and translate
    Conversation
    Highlight text and translate
    Interactive Translate Shell
    Settings

For the first two items to work, you will need some extra packages installed such as tesseract-ocr, poppler-tools, and able to run “soffice –headless.” The video lists what you’ll need, and be sure to check out any links in the description. Also, note that file-paths blurred-out in my videos typically refers to my home folder. I take privacy very seriously.</description>
    <pubDate>Mon, 04 Dec 2017 00:00:00 GMT</pubDate>
  </item>
  <item>
    <title>Composing music in the command-line</title>
    <link>https://www.bitchute.com/video/MfPKZfOazg5f/</link>
    <description>I attempted to create a script to make it easy to use “play” from the SoX package to compose music in the command line. You can get a copy of the script used in the video here: https://github.com/TheOuterLinux/BitChuteNotes/blob/master/Command-Line/10%20-%20Composer%20Script%20-%20Shchedryk
</description>
    <pubDate>Mon, 04 Dec 2017 00:00:01 GMT</pubDate>
  </item>
  <item>
    <title>Playing BitChute videos from the command-line</title>
    <link>https://www.bitchute.com/video/W4g3Jktibucb/</link>
    <description>Recently, and without much warning, Vidme sent out an email saying that they're done after December 15, 2017. Because of this, I decided to use BitChute. However, setting w3m's external web browser to mpv and hoping youtube-dl will find the playable URL is a "no-go." So, I made a short video on hunting it down, including two easy scripts I made (https://github.com/TheOuterLinux/BitChuteNotes/blob/master/Command-Line/bitchute-dl and https://github.com/TheOuterLinux/BitChuteNotes/blob/master/Command-Line/bitchute-play) that you could turn into aliases such as bitchute-dl [URL] and bitchute-play [URL]. The bitchute-play script uses mpv because xdg-open will launch a web browser. I guess you could edit it to use a different player. Both scripts are pretty much just curl and grep.</description>
    <pubDate>Fri, 08 Dec 2017 00:00:00 GMT</pubDate>
  </item>
  <item>
    <title>"I Love Linux" ft. eSpeak</title>
    <link>https://www.bitchute.com/video/J3TpLzRbTNea/</link>
    <description>Wrote a parody called "I Love Linux" using eSpeak because I can't sing and it's awesomely nerdy as hell. It's mostly about Linux, BASH, and command-line.</description>
    <pubDate>Wed, 13 Dec 2017 00:00:00 GMT</pubDate>
  </item>
  <item>
    <title>Fireplace</title>
    <link>https://www.bitchute.com/video/6xWf1jeaXc11/</link>
    <description>You know how people like to watch fireplace videos these days? What about a command-line ASCII version with the ABC's of some terminal commands shown every 5 seconds for nearly 20 minutes? Merry Christmas!</description>
    <pubDate>Mon, 25 Dec 2017 00:00:00 GMT</pubDate>
  </item>
  <item>
    <title>StreamPi - FFMPEG for RTMP Live Streaming</title>
    <link>https://www.bitchute.com/video/2yWzuFMUaBra/</link>
    <description>A while back I asked for help on using ffmpeg to stream to Twitch with a Raspberry Pi 3. After countless testing, Internet searching, and suggestions, I've created a script to help make this mess a little easier:

A. If you are using a Raspberry Pi (anything other than i686 or x86_64):
1. Use ALSA by default
2. Automatically detect monitor size
3. If monitor is larger than 720p wide, scale down

B. If you are using an i686 (32-bit):
1. Automatically use PulseAudio if running
2. Automatically use JACK if running
3. If monitor is larger than 720p wide, scale down

C. If you are using an x86_64 (64-bit):
1. Automatically use PulseAudio if running
2. Automatically use JACK if running
3. Do not scale monitor

D. Variables you can adjust (Supplied with #Notes in the script):
1. RTMP="$1" --> Either store RTMP URL in script or use as /path/to/StreamPi [URL]
2. SOUNDSERVER=alsa --> Shouldn't need to touch
3. SCALE="trunc(oh*a/2)*2:720" --> Prevents "odd number" errors
4. QUALITY=23 --> Same as CRF value, but don't use "0"
5. THREAD_QUEUE=1024 --> Not needed for the Pi, but required on other systems
6. SPANMONITORS=N --> Record/Stream if two monitors or non-mirroring a laptop
7. ANTI_BOTTOM_PANEL=0 --> Use to help hide a bottom panel (in pixels)
8. ANTI_TOP_PANEL=0 --> Use to help hide a top panel (in pixels)
9. ANTI_LEFT_PANEL=0 --> Use to help hide a left-side, vertical panel (in pixels)
10. ANTI_RIGHT_PANEL=0 --> Use to help hide a right-side, vertical panel (in pixels)

Having that said, I made a video showing off this script via "/path/to/StreamPi out.flv" because I could not stream and record at the same time with the firepower that I had. Just know that the frame rates and audio quality appear to be about the same in either case. In the video there are three computers: 1. Raspberry Pi 3 [Raspbian], 2. Acer Aspire One ZG5 Netbook (2008) [AntiX Linux], and a MacBook 4,1 (2008) [MX Linux]. I also test this on a newer x86_64 laptop, but the audio was out of sync from the video by about 10-20 seconds, so I would stick with using OBS Studio on systems that it's still "gracious" enough to support. Maybe if you have an older computer, you can use this. To make this faster, I set an alias in my .bashrc file as "alias stream_twitch='/path/to/StreamPi rtmp://...'"; this way, all I have to do is type "twitch_stream" in a terminal (with X running) and I'm good to go.</description>
    <pubDate>Wed, 07 Mar 2018 00:00:00 GMT</pubDate>
  </item>
</channel>

</rss> 
